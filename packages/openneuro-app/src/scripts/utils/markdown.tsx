import React from "react"
import ReactMarkdown from "react-markdown"
import DOMPurify from "dompurify"
import rehypeRaw from "rehype-raw"
import remarkGfm from "remark-gfm"

interface MarkdownProps {
  children: string
}

// Closely aligned with GitHub Markdown
// See https://github.com/gjtorikian/html-pipeline/blob/7e562219f9814777b73b48f32aece874452c0c5e/lib/html_pipeline/sanitization_filter.rb

const ALLOWED_TAGS = [
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "br",
  "b",
  "i",
  "strong",
  "em",
  "a",
  "pre",
  "code",
  "img",
  "tt",
  "div",
  "ins",
  "del",
  "sup",
  "sub",
  "p",
  "picture",
  "ol",
  "ul",
  "table",
  "thead",
  "tbody",
  "tfoot",
  "blockquote",
  "dl",
  "dt",
  "dd",
  "kbd",
  "q",
  "samp",
  "var",
  "hr",
  "ruby",
  "rt",
  "rp",
  "li",
  "tr",
  "td",
  "th",
  "s",
  "strike",
  "summary",
  "details",
  "caption",
  "figure",
  "figcaption",
  "abbr",
  "bdo",
  "cite",
  "dfn",
  "mark",
  "small",
  "source",
  "span",
  "time",
  "wbr",
]

const ALLOWED_ATTR = [
  "abbr",
  "accept",
  "accept-charset",
  "accesskey",
  "action",
  "align",
  "alt",
  "aria-describedby",
  "aria-hidden",
  "aria-label",
  "aria-labelledby",
  "axis",
  "border",
  "char",
  "charoff",
  "charset",
  "checked",
  "clear",
  "cols",
  "colspan",
  "compact",
  "coords",
  "datetime",
  "dir",
  "disabled",
  "enctype",
  "for",
  "frame",
  "headers",
  "height",
  "hreflang",
  "hspace",
  "id",
  "ismap",
  "label",
  "lang",
  "maxlength",
  "media",
  "method",
  "multiple",
  "name",
  "nohref",
  "noshade",
  "nowrap",
  "open",
  "progress",
  "prompt",
  "readonly",
  "rel",
  "rev",
  "role",
  "rows",
  "rowspan",
  "rules",
  "scope",
  "selected",
  "shape",
  "size",
  "span",
  "start",
  "summary",
  "tabindex",
  "title",
  "type",
  "usemap",
  "valign",
  "value",
  "width",
  "itemprop",
  "href",
  "cite",
  "src",
  "longdesc",
]

/**
 * Sanitize disallowed HTML tags and attributes and convert from Markdown to JSX
 */
export function Markdown({ children }: MarkdownProps) {
  const sanitizedMarkdown = DOMPurify.sanitize(children, {
    ALLOWED_TAGS,
    ALLOWED_ATTR,
    ALLOW_ARIA_ATTR: false,
  })
  return (
    <>
      <ReactMarkdown rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]}>
        {sanitizedMarkdown}
      </ReactMarkdown>
    </>
  )
}
