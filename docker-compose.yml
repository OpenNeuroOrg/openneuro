# docker compose versions
version: '2.3'

services:
  # This dummy service provides shared configuration for all Node deps
  node:
    user: $UID
    image: node:14.16.1
    env_file: ./config.env
    working_dir: /srv
    tmpfs:
      - /srv/.yarn:exec
    volumes:
      - ./:/srv
      - ./.yarn/cache:/srv/.yarn/cache
      - ./.yarn/releases:/srv/.yarn/releases
      - ./.yarn/plugins:/srv/.yarn/plugins

  # web app bundle build
  app:
    extends:
      service: node
    command: bash -c 'yarn install && yarn workspace @openneuro/app start'
    ports:
      - '8145:8145'
      - '9992:9992'
    environment:
      - NODE_ENV=development

  # crn node server
  server:
    extends:
      service: node
    command: bash -c 'yarn install && yarn workspace @openneuro/server start'
    depends_on:
      - redis
      - mongo
      - datalad
      - elasticsearch

  # Elastic Search indexer
  indexer:
    extends:
      service: node
    command: bash -c 'yarn install && yarn workspace @openneuro/indexer start'
    depends_on:
      - server
      - elasticsearch

  # mongodb
  mongo:
    image: mongo:4.0
    volumes:
      - ${PERSISTENT_DIR}/mongo:/data/db

  # Redis
  redis:
    image: redis:alpine
    volumes:
      - ${PERSISTENT_DIR}/redis:/data

  # datalad Python backend
  datalad:
    build:
      context: services/datalad
      target: base
    volumes:
      - ${PERSISTENT_DIR}/datalad:/datalad
      - ./services/datalad/datalad_service:/datalad_service:delegated
    env_file: ./config.env
    init: true
    command:
      [
        'gunicorn',
        '--bind',
        '0.0.0.0:80',
        '--reload',
        "datalad_service.app:create_app('/datalad')",
        '--workers',
        '8',
        '--worker-class',
        'gevent',
        '--timeout',
        '60',
        '--keep-alive',
        '30',
        '--log-level',
        'debug',
      ]
    networks:
      default:
        aliases:
          - datalad-0
          - datalad-1

  # nginx + app
  web:
    image: nginx:1.16.1
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - '80:80'
      - '8110:8110'
      - '9876:80'
    depends_on:
      - server
      - datalad

  elasticsearch:
    image: elasticsearch:7.10.1
    environment:
      discovery.type: single-node
      cluster.routing.allocation.disk.threshold_enabled: 'true'
      cluster.routing.allocation.disk.watermark.flood_stage: 1gb
      cluster.routing.allocation.disk.watermark.low: 10gb
      cluster.routing.allocation.disk.watermark.high: 5gb
    ports:
      - '9200:9200'
      - '9300:9300'

# comment out `x-disabled` to enable kibana service
x-disabled:
  kibana:
    image: kibana:7.10.1
    depends_on:
      - elasticsearch
    ports:
      - '5601:5601'
