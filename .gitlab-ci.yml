variables:
  DOCKER_AUTH_CONFIG: '{ "auths": { "https://index.docker.io/v1/": { "auth": "$DOCKER_AUTH" } }}'
  CODECOV_TOKEN: "e817c2c7-f6e8-4e04-a8a6-bb0929947f05"

image: docker

services:
  - docker:dind

stages:
  - dependencies
  - test
  - package
  - deploy

# Build base image for nodejs
setup_nodejs:
  tags: [ saas-linux-medium-amd64 ]
  stage: dependencies
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/node:latest --tag $CI_REGISTRY_IMAGE/node:latest --tag $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/node:latest

test_nodejs:
  tags: [ saas-linux-medium-amd64 ]
  stage: test
  needs: ["setup_nodejs"]
  script:
    - ci_env=$(/bin/sh ./scripts/codecov-env)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node:latest || true
    - docker run $ci_env -e CI=true $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA yarn test

build_server:
  tags: [ saas-linux-medium-amd64 ]
  stage: package
  needs: ["setup_nodejs"]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA openneuro/node:latest
    - docker pull $CI_REGISTRY_IMAGE/server:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/server:latest --tag $CI_REGISTRY_IMAGE/server:latest --tag $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA packages/openneuro-server
    - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/server:latest

build_app:
  tags: [ saas-linux-large-amd64 ]
  stage: package
  needs: ["setup_nodejs"]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA openneuro/node:latest
    - docker pull $CI_REGISTRY_IMAGE/app:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/app:latest --tag $CI_REGISTRY_IMAGE/app:latest --tag $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA packages/openneuro-app
    - docker push $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/app:latest

build_indexer:
  stage: package
  needs: ["setup_nodejs"]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA openneuro/node:latest
    - docker pull $CI_REGISTRY_IMAGE/indexer:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/indexer:latest --tag $CI_REGISTRY_IMAGE/indexer:latest --tag $CI_REGISTRY_IMAGE/indexer:$CI_COMMIT_SHA  packages/openneuro-indexer
    - docker push $CI_REGISTRY_IMAGE/indexer:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/indexer:latest

build_datalad_service:
  tags: [ saas-linux-medium-amd64 ]
  stage: dependencies
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd services/datalad
    - docker pull $CI_REGISTRY_IMAGE/datalad-service:latest || true
    - docker build --build-arg LERNA_JSON="$(cat ../../lerna.json)" --cache-from $CI_REGISTRY_IMAGE/datalad-service:latest --tag $CI_REGISTRY_IMAGE/datalad-service:latest --tag $CI_REGISTRY_IMAGE/datalad-service:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/datalad-service:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/datalad-service:latest

test_datalad_service:
  stage: test
  needs: ["build_datalad_service"]
  script:
    - ci_env=$(/bin/sh ./scripts/codecov-env)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/datalad-service:$CI_COMMIT_SHA || true
    - docker run $ci_env -e CI=true $CI_REGISTRY_IMAGE/datalad-service:$CI_COMMIT_SHA /bin/sh -c "pipenv install --keep-outdated --dev && pipenv run pytest -n 4 --cov=./datalad_service --cov-report=xml:coverage.xml ./tests && curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x ./codecov && ./codecov -f coverage.xml"


deploy_docker_images:
  stage: deploy
  needs: ["build_app", "build_indexer", "build_server", "build_datalad_service", "test_nodejs", "test_datalad_service"]
  only:
    - tags
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - docker pull $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_IMAGE/indexer:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_IMAGE/datalad-service:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA openneuro/app:$CI_COMMIT_TAG
    - docker tag $CI_REGISTRY_IMAGE/indexer:$CI_COMMIT_SHA openneuro/indexer:$CI_COMMIT_TAG
    - docker tag $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA openneuro/server:$CI_COMMIT_TAG
    - docker tag $CI_REGISTRY_IMAGE/datalad-service:$CI_COMMIT_SHA openneuro/datalad-service:$CI_COMMIT_TAG
    - docker push openneuro/app:$CI_COMMIT_TAG
    - docker push openneuro/indexer:$CI_COMMIT_TAG
    - docker push openneuro/server:$CI_COMMIT_TAG
    - docker push openneuro/datalad-service:$CI_COMMIT_TAG
